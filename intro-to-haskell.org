#+TITLE: Introduction to Haskell
#+AUTHOR: Atreya Ghosal

This is a beginner's introduction to Haskell, assuming that the beginner has already been introduced to FP principles. I'm taking much of this from [[http://learnyouahaskell.com/chapters][Learn You A Haskell]], but skipping the introduction of basic elements of FP like lambdas, recursion, higher order functions, etc, and moving straight on to how to program in Haskell.

Since the point of the POPL course is to introduce you to concepts like currying and type safety and functors and monads (don't ask), and since thoroughly learning Haskell... takes time, I'm going to focus these classes on the elements of Haskell you'll need for this course- which should be enough to let you write, say, a competitive coding program (or an interpreter) in Haskell.

* QuickSort in One Line

Okay, quicksort in /three/ lines.

#+BEGIN_SRC haskell :tangle quicksort.hs
  quicksort :: (Ord a) => [a] -> [a]  
  quicksort [] = []  
  quicksort (x:xs) =  (quicksort [a | a <- xs, a <= x]) ++ [x] ++ (quicksort [a | a <- xs, a > x])
#+END_SRC

Cool, right? So this is why we're learning Haskell. Because it's a nice, expressive, (comparatively) widely-used functional language, with a decent ecosystem for everything from web dev to ML, and manages to remain pure and strongly typed while doing so.

* Haskell Basics

** How To Define A Function

#+BEGIN_SRC haskell :tangle function.hs
  -- f :: Int -> Int -> Bool
  f a b = a == b
#+END_SRC

*** How To Define, Like, Half A Function

#+BEGIN_SRC haskell :tangle partialApp.hs
  add :: Int -> Int -> Int
  add a b = a + b

  --incr :: Int -> Int
  --incr = add 1
#+END_SRC

*** Higher Order Functions

#+BEGIN_SRC haskell :tangle hof.hs


  map' :: (a -> b) -> [a] -> [b]
  map' f [] = []
  map' f ls =  (f (head ls)) : (map' f (tail ls))

#+END_SRC


** Lists Like You Did In Math Class

Haskell provides =ranges= and =list comprehensions=. So, for the famous "Get all the prime numbers between 1 and 100" problem:

#+BEGIN_SRC haskell :tangle primes.hs
  primes :: [Int]
  primes = [x | x <- [1..100], 
                (x `mod` 2 /= 0 &&
                x `mod` 3 /= 0 &&
                x `mod` 5 /= 0 &&
                x `mod` 7 /= 0)]
#+END_SRC

** Lists and Tuples

One difference between Haskell and Racket: in Haskell, as you saw in the type annotations, lists can only contain one type of thing. (I would say one type of /object/, but that might confuse you with OOP.) If you want to put multiple types of thing together, you use a tuple.

=zip= is a function that combines two lists into a list of tuples.

=zipWith= is a slightly cooler function, that combines two lists using any function you want.
 
#+BEGIN_SRC haskell :tangle zips.hs

  same :: Eq a => [a] -> [a] -> [Bool]  
  same la lb = zipWith (==) la lb
#+END_SRC

* List Functions

Take a look at =foldr=, =foldl=, =zipWith= and =map=.

#+BEGIN_SRC haskell :tangle mse.hs
  incr :: Float -> a -> Float
  incr n a = n + 1.0

  len :: [a] -> Float
  len = foldl incr 0.0 

  mse :: [Float] -> [Float] -> Float
  mse la lb = (foldr (+) 0 $ map (^2) $ zipWith (-) la lb) / (len la)   
#+END_SRC

Oh, and, have a look at the =$= operator- it automatically gives operator precedence to anything to the left of the operator. Brackets do, however, have precedence over =$=.

* Make Your Haskell Programs Readable

Use =let= expressions to make your program more readable. Going back to the mean-square-error example:

#+BEGIN_SRC haskell :tangle mse.hs
  mseLet :: [Float] -> [Float] -> Float
  mseLet la lb =
    let
      n = len la
      diff = zipWith (-) la lb
      diffSq = map (^2) diff
     in
      (foldr (+) 0 diffSq) / n

#+END_SRC

Or =where= expressions.

#+BEGIN_SRC haskell :tangle mse.hs
  mseWhere :: [Float] -> [Float] -> Float
  mseWhere la lb = (foldr (+) 0 diffSq) / n
    where
        n = len la
        diff = zipWith (-) la lb
        diffSq = map (^2) diff

#+END_SRC

