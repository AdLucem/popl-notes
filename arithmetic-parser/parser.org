#+TITLE: Parser for the ARITHMETIC Language
#+AUTHOR: Atreyee Ghosal

* Introduction

Your main parse function- that you pass a string representing one line of your program, to- and that returns a parse tree- is as follows:

#+NAME: parse
#+BEGIN_SRC haskell
parse :: String -> ParseTree
parse = recurReduce . (map toType) . tokenize
#+END_SRC

It takes a string, with each token in the string separated by a whitespace. It returns an object of type =ParseTree=, defined as follows:

#+BEGIN_SRC haskell
data ParseTree = Numeric Int | Booleric Bool | Appl Op [ParseTree]
#+END_SRC

This is /not/ the final AST, although it can be simply converted to an AST. The parser does not perform any semantic or type checks, eg: it will not raise an error if =+= is applied to two boolean values.

** Usage

Usage: after tangling out the two =.hs= files (reminder: tangling keys are =Ctrl-c Ctrl-v Ctrl-t=), open the =ghci= prompt, and: 

#+BEGIN_SRC haskell
Prelude> :l ASTParser.hs 
[1 of 2] Compiling ParseUtils       ( ParseUtils.hs, interpreted )
[2 of 2] Compiling ASTParser        ( ASTParser.hs, interpreted )
Ok, two modules loaded.

*ASTParser> parse "0"
Numeric 0

*ASTParser> parse "False"
Booleric False

*ASTParser> parse "( + 23 34 )"
Appl + [Numeric 23,Numeric 34]

*ASTParser> parse "( + ( - 4 2 ) ( / 10 5 ) )"
Appl + [Appl - [Numeric 4,Numeric 2],Appl / [Numeric 10,Numeric 5]]

*ASTParser> parse "( & ( ~ True ) False )"
Appl & [Appl ~ [Booleric True],Booleric False]

*ASTParser> parse "( zero? 0 )"
Appl zero? [Numeric 0]

#+END_SRC

** Usage Within Your Program

You can use it within your interpreter program by:

(a) Placing the =ParseTree.hs= and the =ParseUtils.hs= files in the same directory as your =interpreter.hs= file, and

(b) Importing the =ParseTree= module within your =interpreter.hs= file as follows:

#+BEGIN_SRC haskell

import ParseTree

-- your code here

#+END_SRC

* The =ParseTree= Type

#+NAME: parseTree
#+BEGIN_SRC haskell
data ParseTree = LBracket | RBracket | Numeric Int |
                 Booleric Bool | Operator Op | Appl Op [ParseTree] deriving (Show)

#+END_SRC

The =deriving= keyword means that the type is automatically /deriving/ an instance of that typeclass. So here, it means that we don't have to manually define a =show= function for our type, Haskell does it for us.

** Some Utility Functions For =ParseTree=

Functions to check if (a) Two nodes are of the same type- =isEqv=, and (b) If a node is an expressible (final) value- =isExpr=. The final parse tree of a code line will be composed only of expressible values.

#+NAME: parseTree_utility_functions
#+BEGIN_SRC haskell 
isEqv :: ParseTree -> ParseTree -> Bool
isEqv LBracket LBracket = True
isEqv RBracket RBracket = True
isEqv (Numeric a) (Numeric b) = True
isEqv (Booleric a) (Booleric b) = True
isEqv (Operator a) (Operator b) = True
isEqv (Appl op ls) (Appl op_ ls_) = True
isEqv a b = False


isExpr :: ParseTree -> Bool
isExpr (Booleric a) = True
isExpr (Numeric a) = True
isExpr (Appl a b) = True
isExpr a = False

#+END_SRC
* The =Op= Type

The =Op= type for operators, and a manually derived =Show= typeclass instance for the type.

#+NAME: operator
#+BEGIN_SRC haskell 
data Op = Add | Sub | Mul | Div | And | Or | Not | IsZero
          deriving (Eq)

instance Show Op where
    show Add = "+"
    show Sub = "-"
    show Mul = "*"
    show Div = "/"
    show And = "&"
    show Or = "|"
    show Not = "~"
    show IsZero = "zero?"

#+END_SRC

* Parser Rules

Reduction rules that the parser follows. (Notes: Rules 3 and 4 are the actual reduction rules, rules 1 and 2 just convert the strings to Haskell-understandable typed values.)

** Rule 1

Converts a string representing an operator, to a node in the parse tree containing a value of type =Op=.

#+NAME: rule_1
#+BEGIN_SRC haskell 
toOp :: String -> ParseTree
toOp op = case op of
  "+" -> Operator Add
  "-" -> Operator Sub
  "*" -> Operator Mul
  "/" -> Operator Div
  "&" -> Operator And
  "|" -> Operator Or
  "~" -> Operator Not
  "zero?" -> Operator IsZero
  otherwise -> error "Invalid syntax"

#+END_SRC

** Rule 2

Converts a string representing an expressible value, an operator, or a bracket, to a parse tree leaf node representing the appropriate value.

#+NAME: rule_2
#+BEGIN_SRC haskell 
toType :: String -> ParseTree
toType s
  | isNumber s  = Numeric (read s)
  | isBoolean s = Booleric (read s)
  | isEq "(" s  = LBracket
  | isEq ")" s  = RBracket
  | isOp s      = toOp s
  | otherwise   = error "Incorrect syntax!"

#+END_SRC

** Rule 3

Predicate that checks if rule 3 can be applied on a given sublist- i.e: does that sublist represent a binary application of an operator?

#+NAME: rule_3_pred
#+BEGIN_SRC haskell 
isBinaryPrimApp :: [ParseTree] -> Bool
isBinaryPrimApp ls =
  if ((length ls) == 5) then
    let
      preds = [(isEqv LBracket),
               (isEqv (Operator Add)),
               isExpr, isExpr,
               (isEqv RBracket)]
      applyPred f a = f a
      match = zipWith applyPred preds ls
    in
      foldr (&&) True match
  else
    False

#+END_SRC

Rule 3- converting a sublist of the sort  ["(", <binary_operator>, <value>, <value>, ")"] into a parse tree node representing an application of said operator on the values (=Appl Op [Values]=)

#+NAME: rule_3
#+BEGIN_SRC haskell 
binaryPrimApp :: [ParseTree] -> ParseTree
binaryPrimApp ls = Appl op [x, y]
  where
    (Operator op) = ls !! 1
    x  = ls !! 2
    y  = ls !! 3

#+END_SRC

** Rule 4

Predicate that checks if rule 4 can be applied on a given sublist- i.e: does that sublist represent an unary application of an operator?

#+NAME: rule_4_pred
#+BEGIN_SRC haskell 
isUnaryPrimApp :: [ParseTree] -> Bool
isUnaryPrimApp ls =
  if ((length ls) == 4) then
    let
      preds = [(isEqv LBracket),
               (isEqv (Operator Add)),
               isExpr,
               (isEqv RBracket)]
      applyPred f a = f a
      match = zipWith applyPred preds ls
    in
      foldr (&&) True match
  else
    False

#+END_SRC

Rule 4- converting a sublist of the sort  ["(", <unary_operator>, <value> ")"] into a parse tree node representing an application of said operator on the value (=Appl Op [Value]=)

#+NAME: rule_4
#+BEGIN_SRC haskell
unaryPrimApp :: [ParseTree] -> ParseTree
unaryPrimApp ls = Appl op [x]
  where
    (Operator op) = ls !! 1
    x  = ls !! 2
#+END_SRC

* The Parser Core

** Tokenize

Whitespace-tokenizes a string.

#+NAME: tokenize
#+BEGIN_SRC haskell 
tokenize :: String -> [String]
tokenize = words
#+END_SRC

** Map A Function Over n-sized Windows of a List

Take size-n windows of a list, map the predicate over each of those windows, and reduce the window to a single value if the predicate fits.

#+NAME: windowmap
#+BEGIN_SRC haskell 
windowmap :: Int
          -> ([ParseTree] -> Bool)
          -> ([ParseTree] -> ParseTree)
          -> [ParseTree]
          -> [ParseTree] -- accumulator
          -> [ParseTree]
windowmap n predf f acc [] = acc
windowmap n predf f acc ls =
  let
    window = take n ls
    rest = drop n ls
  in
    if predf window
    then
      windowmap n predf f (acc ++ [f window]) rest
    else
      windowmap n predf f (acc ++ [head ls]) (tail ls)

#+END_SRC
** Apply Reduction Rules

Apply reduction rules to a list of leaf nodes until they're all reduced to a single parse tree

#+NAME: recurReduce
#+BEGIN_SRC haskell
recurReduce :: [ParseTree] -> ParseTree
recurReduce [a] = a
recurReduce ls =
  let
    map4 = windowmap 4 isUnaryPrimApp unaryPrimApp [] ls
    map5 = windowmap 5 isBinaryPrimApp binaryPrimApp [] map4
  in
    recurReduce map5
#+END_SRC

* Utility Functions

These are utility functions (mostly predicates) used in the main parser module.

#+BEGIN_SRC haskell :tangle ParseUtils.hs
module ParseUtils where

isEq :: String -> String -> Bool
isEq s s_ = s == s_

numbers :: String
numbers = "1234567890"

isDigit :: Char -> Bool
isDigit d = d `elem` numbers

isNumber :: String -> Bool
isNumber n = foldr (&&) True $  map isDigit n

isBoolean :: String -> Bool
isBoolean s = (s == "True") || (s == "False")

isBinaryOp :: String -> Bool
isBinaryOp s = s `elem` ["=", "+", "-", "*", "/", "&", "|"]

isUnaryOp :: String -> Bool
isUnaryOp s = s `elem` ["~", "zero?"]

isOp :: String -> Bool
isOp s = (isBinaryOp s) || (isUnaryOp s)

#+END_SRC

* Imports and Tangling

#+BEGIN_SRC haskell :eval no :noweb yes :tangle ASTParser.hs
module ASTParser where

import Data.String
import ParseUtils

<<parse>>
<<parseTree>>
<<parseTree_utility_functions>>
<<operator>>
<<rule_1>>
<<rule_2>>
<<rule_3_pred>>
<<rule_3>>
<<rule_4_pred>>
<<rule_4>>
<<tokenize>>
<<windowmap>>
<<recurReduce>>
#+END_SRC
